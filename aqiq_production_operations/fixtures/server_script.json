[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-23 16:40:56.530433",
  "module": "AQIQ Production operations",
  "name": "Job Card",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Card",
  "script": "\ndoc.employee = ''",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-07-24 11:13:25.096818",
  "module": "AQIQ Production operations",
  "name": "Job Card Employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Card Time Log",
  "script": "doc.employee = \"\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-07 12:35:08.393094",
  "module": "AQIQ Production operations",
  "name": "Job card Custom",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Job Card",
  "script": "def create_material_request(doc):\r\n    if not doc.items:\r\n        return\r\n\r\n    # Check for existing Material Requests (both draft and submitted)\r\n    existing_mr = frappe.db.exists(\"Material Request\", {\"job_card\": doc.name, \"docstatus\": [\"!=\", 2]})\r\n    if existing_mr:\r\n        return\r\n\r\n    # Fetch the work order linked to the Job Card\r\n    work_order = frappe.db.get_value(\"Work Order\", doc.work_order, 'name')\r\n    work_order_warehouse = frappe.db.get_value(\"Work Order\", doc.work_order, \"wip_warehouse\")\r\n\r\n    # Ensure the schedule date (expected_start_date) is valid\r\n    schedule_date = doc.expected_start_date or frappe.db.get_value(\"Work Order\", doc.work_order, \"planned_start_date\")\r\n\r\n    material_request = frappe.new_doc(\"Material Request\")\r\n    material_request.update({\r\n        \"material_request_type\": \"Material Transfer\",\r\n        \"company\": doc.company,\r\n        \"transaction_date\": frappe.utils.nowdate(),\r\n        \"job_card\": doc.name,\r\n        \"work_order\": work_order\r\n    })\r\n\r\n    items_added = False\r\n    for item in doc.items:\r\n        if item.required_qty > 0:\r\n            # Set a valid schedule_date, fallback to posting_date if expected_start_date is missing\r\n            item_schedule_date = schedule_date or doc.posting_date\r\n\r\n            # Use item's warehouse or fall back to Work Order warehouse\r\n            warehouse = item.wip_warehouse or work_order_warehouse\r\n\r\n            if not warehouse:\r\n                frappe.throw(f\"Warehouse is mandatory for item {item.item_code} and no default warehouse found.\")\r\n\r\n            material_request.append(\"items\", {\r\n                \"item_code\": item.item_code,\r\n                \"qty\": item.required_qty,\r\n                \"stock_uom\": item.stock_uom,\r\n                \"schedule_date\": item_schedule_date,  # Ensure a valid date is provided\r\n                \"warehouse\": warehouse,  # Use item or Work Order warehouse\r\n                \"job_card\": doc.name,\r\n                \"from_warehouse\": item.source_warehouse,\r\n                \"work_order\": work_order\r\n            })\r\n            items_added = True\r\n\r\n    if items_added:\r\n        material_request.insert()\r\n        material_request.submit()\r\n        frappe.msgprint(f\"Material Request {material_request.name} created and submitted.\")\r\n    else:\r\n        frappe.msgprint(\"No items added to Material Request. Material Request not created.\")\r\n\r\ncreate_material_request(doc)\r\n",
  "script_type": "DocType Event"
 }
]