[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card Tool",
  "enabled": 1,
  "modified": "2024-07-24 11:06:49.691863",
  "module": "AQIQ Production operations",
  "name": "Job Card Tool",
  "script": "let workstationPromptShown = false;\r\n\r\nfrappe.ui.form.on('Job Card Tool', {\r\n    refresh: function(frm) {\r\n        addCustomCSS();\r\n        loadFiltersFromLocalStorage(frm);\r\n\r\n        if (!frm.doc.filtered_workstations && !workstationPromptShown) {\r\n            promptForWorkstationConfiguration(frm);\r\n            workstationPromptShown = true;\r\n        } else {\r\n            refreshJobCards(frm);\r\n        }\r\n\r\n        if (!frm.auto_refresh_interval) {\r\n            frm.auto_refresh_interval = setInterval(() => refreshJobCards(frm), 30000);\r\n        }\r\n\r\n        addFilterButtons(frm);\r\n        frm.disable_save();\r\n    },\r\n    onload: function(frm) {\r\n        initializeJobCardStatus(frm);\r\n        loadFiltersFromLocalStorage(frm);\r\n\r\n        if (!frm.doc.filtered_workstations && !workstationPromptShown) {\r\n            promptForWorkstationConfiguration(frm);\r\n            workstationPromptShown = true;\r\n        } else {\r\n            refreshJobCards(frm);\r\n        }\r\n    },\r\n    on_unload: function(frm) {\r\n        clearInterval(frm.auto_refresh_interval);\r\n    }\r\n});\r\n\r\nfunction loadFiltersFromLocalStorage(frm) {\r\n    const savedFilters = JSON.parse(localStorage.getItem('job_card_filters')) || {};\r\n    frm.doc.job_card_status = savedFilters.job_card_status || ['Open', 'Work In Progress'];\r\n    frm.doc.filtered_workstations = savedFilters.filtered_workstations || '';\r\n    frm.refresh_field('job_card_status');\r\n    frm.refresh_field('filtered_workstations');\r\n}\r\n\r\nfunction saveFiltersToLocalStorage(frm) {\r\n    const filters = {\r\n        job_card_status: frm.doc.job_card_status,\r\n        filtered_workstations: frm.doc.filtered_workstations\r\n    };\r\n    localStorage.setItem('job_card_filters', JSON.stringify(filters));\r\n}\r\n\r\nfunction promptForWorkstationConfiguration(frm) {\r\n    console.log(\"Entering promptForWorkstationConfiguration\");\r\n    const d = new frappe.ui.Dialog({\r\n        title: __('Configure Workstation'),\r\n        fields: [\r\n            {\r\n                label: __('Scan Data'),\r\n                fieldname: 'scanned_data',\r\n                fieldtype: 'Data',\r\n                description: __('Scan or enter the encoded data here'),\r\n                reqd: 1\r\n            },\r\n            {\r\n                label: __('Workstation'),\r\n                fieldname: 'workstation',\r\n                fieldtype: 'Data',\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: __('Password'),\r\n                fieldname: 'password',\r\n                fieldtype: 'Password',\r\n                reqd: 1\r\n            }\r\n        ],\r\n        primary_action_label: __('Apply'),\r\n        primary_action(values) {\r\n            console.log(\"Apply button clicked\");\r\n            applyWorkstationConfiguration(frm, values.workstation);\r\n            d.hide();\r\n            frappe.show_alert({\r\n                message: __('Workstation configuration applied successfully'),\r\n                indicator: 'green'\r\n            });\r\n        }\r\n    });\r\n\r\n    d.fields_dict.scanned_data.input.addEventListener('change', function() {\r\n        const scannedData = this.value;\r\n        try {\r\n            const decodedData = decodeScannedData(scannedData);\r\n            d.set_value('workstation', decodedData.workstation);\r\n            d.set_value('password', decodedData.password);\r\n            d.get_primary_btn().prop('disabled', false);\r\n        } catch (error) {\r\n            console.error(\"Error decoding scanned data:\", error);\r\n            frappe.msgprint(__(\"Invalid scanned data: \") + error.message);\r\n            d.get_primary_btn().prop('disabled', true);\r\n        }\r\n    });\r\n\r\n    d.show();\r\n}\r\n\r\nfunction applyWorkstationConfiguration(frm, workstation) {\r\n    console.log(\"Applying workstation configuration:\", workstation);\r\n    frm.doc.filtered_workstations = workstation;\r\n    saveFiltersToLocalStorage(frm);\r\n    frm.refresh_field('filtered_workstations');\r\n    refreshJobCards(frm);\r\n    addWorkstationFilterButton(frm);\r\n}\r\nfunction decodeScannedData(scannedData) {\r\n    try {\r\n        const decoded = JSON.parse(atob(scannedData));\r\n        if (decoded.workstation && decoded.password) {\r\n            return decoded;\r\n        } else {\r\n            throw new Error(\"Missing workstation or password in decoded data\");\r\n        }\r\n    } catch (error) {\r\n        throw new Error(\"Failed to decode scanned data: \" + error.message);\r\n    }\r\n}\r\n\r\n\r\nfunction initializeJobCardStatus(frm) {\r\n    frm.doc.job_card_status = frm.doc.job_card_status || ['Open', 'Work In Progress'];\r\n}\r\n\r\nfunction addFilterButtons(frm) {\r\n    addStatusFilterButton(frm);\r\n    addWorkstationFilterButton(frm);\r\n}\r\n\r\nfunction addStatusFilterButton(frm) {\r\n    const statuses = ['Open', 'Work In Progress', 'On Hold', 'Completed', 'Cancelled'];\r\n\r\n    frm.page.add_inner_button(__('Filter Status'), function() {\r\n        new frappe.ui.Dialog({\r\n            title: __('Filter Job Cards by Status'),\r\n            fields: statuses.map(status => ({\r\n                label: __(status),\r\n                fieldname: status.toLowerCase().replace(/\\s+/g, '_'),\r\n                fieldtype: 'Check',\r\n                default: frm.doc.job_card_status.includes(status)\r\n            })),\r\n            primary_action_label: __('Apply'),\r\n            primary_action(values) {\r\n                frm.doc.job_card_status = Object.entries(values)\r\n                    .filter(([_, value]) => value)\r\n                    .map(([key, _]) => key.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '));\r\n\r\n                saveFiltersToLocalStorage(frm);\r\n                refreshJobCards(frm);\r\n                this.hide();\r\n            }\r\n        }).show();\r\n    });\r\n}\r\n\r\nfunction addWorkstationFilterButton(frm) {\r\n    // Remove existing button if it exists\r\n    frm.page.remove_inner_button('Filter Workstations');\r\n    frm.page.remove_inner_button('Login');\r\n    frm.page.remove_inner_button('Logout');\r\n    \r\n    if (!frm.doc.filtered_workstations) {\r\n        // If no workstation is configured, show Login button\r\n        frm.page.add_inner_button(__('Login'), function() {\r\n            promptForWorkstationConfiguration(frm);\r\n        });\r\n    } else {\r\n        // If workstation is configured, show Logout button\r\n        frm.page.add_inner_button(__('Logout'), function() {\r\n            frappe.confirm(\r\n                __('Are you sure you want to logout from the current workstation?'),\r\n                async function() {\r\n                    try {\r\n                        // Reset filtered workstations\r\n                        frm.doc.filtered_workstations = '';\r\n                        await saveFiltersToLocalStorage(frm);\r\n                        await refreshJobCards(frm);\r\n\r\n                        // Show success alert\r\n                        frappe.show_alert({\r\n                            message: __('Logged out successfully'),\r\n                            indicator: 'green'\r\n                        });\r\n\r\n                        // Reload the entire page\r\n                        window.location.reload();\r\n                    } catch (error) {\r\n                        frappe.msgprint(__('Failed to logout. Please try again.'));\r\n                        console.error(error);\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nfunction getCustomerName(workOrder) {\r\n    return new Promise((resolve) => {\r\n        frappe.db.get_value('Work Order', workOrder, 'custom_customer_name', (r) => {\r\n            resolve(r.custom_customer_name || ' ');\r\n        });\r\n    });\r\n}\r\n\r\nfunction refreshJobCards(frm) {\r\n    if (frm.doc.__islocal || !frm.doc.filtered_workstations) return;\r\n\r\n    let filters = {\r\n        'status': ['in', frm.doc.job_card_status || ['Open', 'Work In Progress', 'On Hold', 'Completed', 'Cancelled']],\r\n        'workstation': ['in', frm.doc.filtered_workstations.split(',')]\r\n    };\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: 'Job Card',\r\n            filters: filters,\r\n            fields: [\r\n                'name', 'workstation', 'operation', 'employee', 'started_time', \r\n                'status', 'work_order', 'for_quantity', 'total_completed_qty', 'custom_is_active'\r\n            ]\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                renderJobCards(frm, r.message);\r\n                addJobCardActions(frm, r.message);\r\n                updateFilterIndicator(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction renderJobCards(frm, jobCards) {\r\n    const $wrapper = $(frm.fields_dict['workstation_dashboard'].wrapper);\r\n    $wrapper.empty();\r\n\r\n    const groupedJobCards = groupJobCardsByStatus(jobCards);\r\n\r\n    const statusOrder = ['Work In Progress', 'Open', 'On Hold', 'Completed', 'Cancelled'];\r\n\r\n    const html = statusOrder.map(status => {\r\n        if (!groupedJobCards[status] || groupedJobCards[status].length === 0) return '';\r\n\r\n        return `\r\n            <div class=\"job-cards-group\">\r\n                <h3>${status} (${groupedJobCards[status].length})</h3>\r\n                <div class=\"job-cards-grid\">\r\n                    ${groupedJobCards[status].map(jobCard => renderJobCardTile(jobCard)).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }).join('');\r\n\r\n    $wrapper.html(html);\r\n    bindActionEvents(frm);\r\n    bindLinkEvents();\r\n}\r\n\r\nfunction groupJobCardsByStatus(jobCards) {\r\n    return jobCards.reduce((acc, jobCard) => {\r\n        if (!acc[jobCard.status]) {\r\n            acc[jobCard.status] = [];\r\n        }\r\n        acc[jobCard.status].push(jobCard);\r\n        return acc;\r\n    }, {});\r\n}\r\n\r\nfunction renderJobCardTile(jobCard) {\r\n    const employeeName = jobCard.employee && jobCard.employee.length > 0 && jobCard.employee[0].employee\r\n        ? jobCard.employee[0].employee\r\n        : 'N/A';\r\n    return `\r\n        <div class=\"job-card-tile ${jobCard.custom_is_active === \"1\" ? 'active-job-card' : ''}\">\r\n            <div class=\"job-card-header\" style=\"background-color: ${getStatusColor(jobCard.status)};\">\r\n                <div class=\"job-card-name\">\r\n                    <a href=\"#\" class=\"job-card-link\" data-route=\"Form/Job Card/${encodeURIComponent(jobCard.name)}\">${jobCard.name}</a>\r\n                </div>\r\n                <div class=\"job-card-status\">\r\n                    ${jobCard.status}\r\n                </div>\r\n            </div>\r\n            <div class=\"job-card-body\">\r\n                <p><strong>Customer:</strong> <span style=\"font-size: 1.2em; font-weight: bold;\">${jobCard.item_name}</span></p>\r\n                <p><strong>Operation:</strong> ${jobCard.operation}</p>\r\n                <p><strong>Workstation:</strong> ${jobCard.workstation}</p>\r\n                \r\n                <p><strong>Started:</strong> ${formatDateTime(jobCard.actual_start_date)}</p>\r\n                <p><strong>Work Order:</strong> \r\n                    <a href=\"#\" class=\"work-order-link\" data-route=\"Form/Work Order/${encodeURIComponent(jobCard.work_order)}\">${jobCard.work_order}</a>\r\n                </p>\r\n                <p><strong>Qty:</strong> ${jobCard.total_completed_qty} / ${jobCard.for_quantity}</p>\r\n                <p><strong>Active:</strong> ${jobCard.custom_is_active === \"1\" ? 'Yes' : 'No'}</p>\r\n            </div>\r\n            <div class=\"job-card-actions\">\r\n                ${getActionButtons(jobCard)}\r\n            </div>\r\n        </div>\r\n    `;\r\n}\r\nfunction getEmployeeDisplay(jobCard) {\r\n    return jobCard.employee && jobCard.employee.length > 0 ? jobCard.employee.map(emp => emp.employee).join(', ') : 'Not Assigned';\r\n}\r\n\r\nfunction bindLinkEvents() {\r\n    $('.job-card-link, .work-order-link').on('click', function(e) {\r\n        e.preventDefault();\r\n        frappe.set_route($(this).data('route'));\r\n    });\r\n}\r\n\r\nfunction bindActionEvents(frm) {\r\n    $('.btn-start').on('click', function() {\r\n        startJob(frm, $(this).data('job-card'));\r\n    });\r\n\r\n    $('.btn-pause').on('click', function() {\r\n        pauseJob(frm, $(this).data('job-card'));\r\n    });\r\n\r\n    $('.btn-complete').on('click', function() {\r\n        completeJob(frm, $(this).data('job-card'));\r\n    });\r\n\r\n    $('.btn-submit').on('click', function() {\r\n        submitJob(frm, $(this).data('job-card'));\r\n    });\r\n\r\n    $('.btn-resume').on('click', function() {\r\n        resumeJob(frm, $(this).data('job-card'));\r\n    });\r\n}\r\n\r\nasync function completeJob(frm, jobCard) {\r\n    try {\r\n        // Load the Job Card document\r\n        await frappe.model.with_doc('Job Card', jobCard);\r\n        let doc = frappe.get_doc('Job Card', jobCard);\r\n        let qtyToManufacture = doc.for_quantity;\r\n        let completedQty = doc.total_completed_qty || 0;\r\n        let remainingQty = qtyToManufacture - completedQty;\r\n\r\n        if (remainingQty <= 0) {\r\n            frappe.msgprint(__('No quantity left to complete.'));\r\n            return;\r\n        }\r\n\r\n        // Fetch the employee assigned to the job card\r\n        const employeeResponse = await frappe.call({\r\n            method: \"aqiq_production_operations.aqiq_production_operations.rest.update_jobcard.get_job_card_employees\",\r\n            args: { job_card_id: jobCard }\r\n        });\r\n\r\n        if (!employeeResponse.message.success || employeeResponse.message.employees.length === 0) {\r\n            frappe.msgprint(__('No employees found for this job card.'));\r\n            return;\r\n        }\r\n\r\n        const employee = employeeResponse.message.employees[0]; // Assuming the first employee in the list\r\n\r\n        // Prompt user for completed quantity\r\n        let fields = [\r\n            {\r\n                fieldname: 'completed_qty',\r\n                label: __('Completed Quantity'),\r\n                fieldtype: 'Float',\r\n                reqd: 1,\r\n                default: remainingQty,\r\n                description: `Quantity to manufacture: ${qtyToManufacture}, Already completed: ${completedQty}, Remaining: ${remainingQty}`\r\n            }\r\n        ];\r\n\r\n        frappe.prompt(fields, async function(values) {\r\n            let newCompletedQty = values.completed_qty;\r\n\r\n            if (newCompletedQty <= 0 || newCompletedQty > remainingQty) {\r\n                frappe.msgprint(__('Invalid completed quantity.'));\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate the new total completed quantity\r\n                let newTotalCompletedQty = completedQty + newCompletedQty;\r\n\r\n                // Call the existing `make_time_log` method\r\n                await frappe.call({\r\n                    method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n                    args: {\r\n                        args: JSON.stringify({\r\n                            job_card_id: jobCard,\r\n                            employee: employee,\r\n                            completed_qty: newCompletedQty,\r\n                            complete_time: frappe.datetime.now_datetime()\r\n                        })\r\n                    }\r\n                });\r\n\r\n                // Update the Job Card document with new completed quantity\r\n                await frappe.call({\r\n                    method: \"frappe.client.set_value\",\r\n                    args: {\r\n                        doctype: \"Job Card\",\r\n                        name: jobCard,\r\n                        fieldname: {\r\n                            \"total_completed_qty\": newTotalCompletedQty\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Check if the job is completed\r\n                if (newTotalCompletedQty >= qtyToManufacture) {\r\n                    await updateJobCardStatus(frm, jobCard, \"Completed\", false);\r\n                    frappe.show_alert(__('Job completed successfully.'));\r\n                } else {\r\n                    await updateJobCardStatus(frm, jobCard, \"Work In Progress\", false);\r\n                }\r\n\r\n                refreshJobCards(frm);\r\n            } catch (error) {\r\n                frappe.msgprint(__('Failed to update the job card time log. Please try again.'));\r\n                console.error(error);\r\n            }\r\n        }, __('Enter Completed Quantity'), __('Complete Job'));\r\n    } catch (error) {\r\n        frappe.msgprint(__('Failed to load the job card. Please try again.'));\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nfunction getActionButtons(jobCard) {\r\n    let buttons = '';\r\n    const remainingQty = jobCard.for_quantity - (jobCard.total_completed_qty || 0);\r\n    const hasStarted = jobCard.status === 'Work In Progress' || jobCard.status === 'On Hold';\r\n    const isNotActive = jobCard.custom_is_active == 0;\r\n\r\n    // Existing logic for other buttons\r\n    if (jobCard.total_completed_qty < jobCard.for_quantity) {\r\n        if (jobCard.custom_is_active == 1) {\r\n            // Buttons for when the job card is active\r\n            buttons += `\r\n                <button class=\"btn btn-warning btn-xs btn-pause\" data-job-card=\"${jobCard.name}\">Pause</button>\r\n                <button class=\"btn btn-success btn-xs btn-complete\" data-job-card=\"${jobCard.name}\">Complete</button>\r\n            `;\r\n        } else {\r\n            if (jobCard.status === 'Open' || (jobCard.status === 'Work In Progress' && remainingQty > 0)) {\r\n                buttons += `<button class=\"btn btn-primary btn-xs btn-start\" data-job-card=\"${jobCard.name}\">Start</button>`;\r\n            }\r\n            if (jobCard.status === 'On Hold' && remainingQty > 0) {\r\n                buttons += `<button class=\"btn btn-info btn-xs btn-resume\" data-job-card=\"${jobCard.name}\">Resume</button>`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Show submit button if job card is Work In Progress or On Hold and is not active\r\n    if (hasStarted && (jobCard.custom_is_active == 0 || jobCard.total_completed_qty > 0)) {\r\n        buttons += `<button class=\"btn btn-info btn-xs btn-submit\" data-job-card=\"${jobCard.name}\">Submit</button>`;\r\n    }\r\n\r\n    return buttons;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function submitJob(frm, jobCard) {\r\n    // Reload the document before any operation\r\n    let doc = await frappe.db.get_doc('Job Card', jobCard);\r\n    let qtyToManufacture = doc.for_quantity;\r\n    let completedQty = doc.total_completed_qty || 0;\r\n    let remainingQty = qtyToManufacture - completedQty;\r\n\r\n    // Reload the document again before submitting\r\n    doc = await frappe.db.get_doc('Job Card', jobCard);\r\n    \r\n    // If the job card is not already completed, update its status and completed quantity\r\n    if (doc.status !== 'Completed') {\r\n        let newCompletedQty = remainingQty;\r\n        let totalCompletedQty = completedQty + newCompletedQty;\r\n        \r\n        await frappe.call({\r\n            method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n            args: {\r\n                args: {\r\n                    job_card_id: jobCard,\r\n                    complete_time: frappe.datetime.now_datetime(),\r\n                    completed_qty: newCompletedQty,\r\n                    status: 'Completed'\r\n                }\r\n            }\r\n        });\r\n\r\n        await frappe.db.set_value('Job Card', jobCard, {\r\n            'status': 'Completed',\r\n            'total_completed_qty': totalCompletedQty\r\n        });\r\n    }\r\n\r\n    // Reload the document before submitting\r\n    doc = await frappe.db.get_doc('Job Card', jobCard);\r\n    doc.docstatus = 1;\r\n\r\n    try {\r\n        await frappe.call({\r\n            method: 'frappe.client.submit',\r\n            args: {\r\n                doc: doc\r\n            }\r\n        });\r\n\r\n        frappe.show_alert({ message: __('Job Card submitted successfully.'), indicator: 'green' });\r\n        \r\n        if (remainingQty > 0) {\r\n            createNewJobCard(frm, doc, remainingQty);\r\n        } else {\r\n            refreshJobCards(frm);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error submitting Job Card:\", error);\r\n        frappe.msgprint(__(\"Error submitting Job Card. The job card list will be refreshed.\"));\r\n        refreshJobCards(frm);\r\n    }\r\n}\r\n\r\nasync function createNewJobCard(frm, parentJobCard, remainingQty) {\r\n    try {\r\n        let result = await frappe.call({\r\n            method: \"aqiq_production_operations.aqiq_production_operations.rest.rest.create_and_rename_job_card\",\r\n            args: {\r\n                parent_job_card: parentJobCard.name,\r\n                remaining_qty: remainingQty\r\n            }\r\n        });\r\n\r\n        if (result && result.message) {\r\n            frappe.show_alert({ message: __(`New Job Card ${result.message} created for remaining quantity.`), indicator: 'green' });\r\n            refreshJobCards(frm);\r\n        } else {\r\n            frappe.msgprint(__(\"Error creating new Job Card. Please try again.\"));\r\n            refreshJobCards(frm);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in createNewJobCard:\", error);\r\n        frappe.msgprint(__(\"An error occurred while creating a new Job Card. Please try again.\"));\r\n        refreshJobCards(frm);\r\n    }\r\n}\r\nfunction addJobCardActions(frm, jobCards) {\r\n    frm.page.clear_actions_menu();\r\n\r\n    const hasOpenJobs = jobCards.some(job => job.status === \"Open\");\r\n    const hasRunningJobs = jobCards.some(job => job.status === \"Work In Progress\");\r\n\r\n    if (hasOpenJobs) {\r\n        frm.page.add_action_item(__('Start All Open Jobs'), () => startAllOpenJobs(frm, jobCards));\r\n    }\r\n\r\n    if (hasRunningJobs) {\r\n        frm.page.add_action_item(__('Pause All Running Jobs'), () => pauseAllRunningJobs(frm, jobCards));\r\n    }\r\n\r\n    if (hasRunningJobs) {\r\n        frm.page.add_action_item(__('Pause All Running Jobs'), () => pauseAllRunningJobs(frm, jobCards));\r\n    }\r\n\r\n    frm.page.add_action_item(__('Refresh Job Cards'), () => refreshJobCards(frm));\r\n    frm.page.add_action_item(__('Clear All Filters'), () => clearAllFilters(frm));\r\n}\r\n\r\nfunction updateFilterIndicator(frm) {\r\n    const allStatuses = ['Open', 'Work In Progress', 'On Hold', 'Completed', 'Cancelled'];\r\n    const selectedStatuses = frm.doc.job_card_status || [];\r\n    const filteredWorkstations = frm.doc.filtered_workstations ? frm.doc.filtered_workstations.split(',') : [];\r\n\r\n    let indicatorText = '';\r\n    let indicatorColor = 'blue';\r\n    let tooltipText = '';\r\n\r\n    if (selectedStatuses.length === allStatuses.length && filteredWorkstations.length === 0) {\r\n        indicatorText = __('No Filters');\r\n    } else {\r\n        let filterParts = [];\r\n\r\n        if (selectedStatuses.length !== allStatuses.length) {\r\n            let statusText = truncateList(selectedStatuses, 2);\r\n            filterParts.push(`<i class=\"fa fa-filter\"></i> ${__(`Status: ${statusText}`)}`);\r\n            tooltipText += `Statuses: ${selectedStatuses.join(', ')}\\n`;\r\n        }\r\n\r\n        if (filteredWorkstations.length > 0) {\r\n            let workstationText = truncateList(filteredWorkstations, 2);\r\n            filterParts.push(`<i class=\"fa fa-cog\"></i> ${__(`Workstation: ${workstationText}`)}`);\r\n            tooltipText += `Workstations: ${filteredWorkstations.join(', ')}`;\r\n        }\r\n\r\n        indicatorText = __('Filtered: ') + filterParts.join(' | ');\r\n        indicatorColor = 'orange';\r\n    }\r\n\r\n    frm.page.set_indicator(indicatorText, indicatorColor);\r\n    frm.page.indicator.attr('title', tooltipText).tooltip();\r\n}\r\n\r\nfunction truncateList(list, maxItems) {\r\n    return list.length <= maxItems ? list.join(', ') : `${list.slice(0, maxItems).join(', ')}, ...and ${list.length - maxItems} more`;\r\n}\r\n\r\nfunction clearAllFilters(frm) {\r\n    frm.doc.job_card_status = ['Open', 'Work In Progress', 'On Hold', 'Completed', 'Cancelled'];\r\n    frm.doc.filtered_workstations = '';\r\n    refreshJobCards(frm);\r\n}\r\n\r\nfunction startAllOpenJobs(frm, jobCards) {\r\n    jobCards.filter(job => job.status === \"Open\").forEach(job => startJob(frm, job.name));\r\n}\r\n\r\nfunction pauseAllRunningJobs(frm, jobCards) {\r\n    jobCards.filter(job => job.status === \"Work In Progress\").forEach(job => pauseJob(frm, job.name));\r\n}\r\nfunction startJob(frm, jobCard) {\r\n    // Fetch job card details\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"Job Card\",\r\n            name: jobCard\r\n        },\r\n        callback: async function(r) {\r\n            if (r.message) {\r\n                const jobCardDoc = r.message;\r\n                try {\r\n                    let selectedEmployees;\r\n\r\n                    // Check if custom_employee_list is empty\r\n                    if (!jobCardDoc.custom_employee_list || jobCardDoc.custom_employee_list.length === 0) {\r\n                        // If empty, prompt for employee selection\r\n                        selectedEmployees = await selectEmployees(jobCardDoc);\r\n                        if (selectedEmployees.length === 0) {\r\n                            frappe.msgprint(__(\"No employees selected. Job start aborted.\"));\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        // If not empty, use existing employees\r\n                        selectedEmployees = jobCardDoc.custom_employee_list.map(emp => ({ employee: emp.employee }));\r\n                    }\r\n\r\n                    if (selectedEmployees.length > 0) {\r\n                        // Prepare arguments for server-side method\r\n                        const args = {\r\n                            job_card_id: jobCard,\r\n                            start_time: frappe.datetime.now_datetime(),\r\n                            status: \"Work In Progress\",\r\n                            employees: JSON.stringify(selectedEmployees)\r\n                        };\r\n                        // Start the job with selected employees\r\n                        frappe.call({\r\n                            method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n                            args: { args: args },\r\n                            callback: function(r) {\r\n                                if (!r.exc) {\r\n                                    frappe.show_alert(__('Job Card started'));\r\n                                    // Update the job card fields directly\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.set_value\",\r\n                                        args: {\r\n                                            doctype: \"Job Card\",\r\n                                            name: jobCard,\r\n                                            fieldname: {\r\n                                                status: \"Work In Progress\",\r\n                                                custom_is_active: 1,\r\n                                                custom_employee_list: selectedEmployees\r\n                                            }\r\n                                        },\r\n                                        callback: function(r) {\r\n                                            if (!r.exc) {\r\n                                                refreshJobCards(frm);\r\n                                            } else {\r\n                                                frappe.msgprint(__(\"Error updating Job Card fields. Please try again.\"));\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    frappe.msgprint(__(\"Error starting the job. Please try again.\"));\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint(__(\"No employees selected. Job start aborted.\"));\r\n                    }\r\n                } catch (error) {\r\n                    console.error(error);\r\n                    frappe.msgprint(__(\"Error selecting employees or starting the job. Please try again.\"));\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction selectEmployees(jobCardDoc) {\r\n    return new Promise((resolve, reject) => {\r\n        frappe.call({\r\n            method: \"aqiq_production_operations.aqiq_production_operations.rest.rest.get_workstation_employees\",\r\n            args: {\r\n                workstation: jobCardDoc.workstation\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    const employees = r.message;\r\n                    const d = new frappe.ui.Dialog({\r\n                        title: __('Select Employees'),\r\n                        fields: [\r\n                            {\r\n                                fieldname: 'employee_table',\r\n                                fieldtype: 'Table',\r\n                                label: __('Employees'),\r\n                                fields: [\r\n                                    {\r\n                                        fieldname: 'employee',\r\n                                        fieldtype: 'Link',\r\n                                        options: 'Employee',\r\n                                        label: __('Employee'),\r\n                                        in_list_view: 1,\r\n                                        get_query: () => {\r\n                                            return {\r\n                                                filters: [\r\n                                                    ['name', 'in', employees.map(e => e.employee)]\r\n                                                ]\r\n                                            };\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'employee_name',\r\n                                        fieldtype: 'Data',\r\n                                        label: __('Employee Name'),\r\n                                        in_list_view: 1,\r\n                                        read_only: 1\r\n                                    }\r\n                                ],\r\n                                data: employees\r\n                            }\r\n                        ],\r\n                        primary_action_label: __('Start Job'),\r\n                        primary_action(values) {\r\n                            const selectedEmployees = values.employee_table.filter(row => row.employee);\r\n                            if (selectedEmployees.length > 0) {\r\n                                d.hide();\r\n                                resolve(selectedEmployees.map(emp => ({ employee: emp.employee })));\r\n                            } else {\r\n                                frappe.msgprint(__(\"Please select at least one employee.\"));\r\n                                resolve([]);\r\n                            }\r\n                        }\r\n                    });\r\n                    d.show();\r\n                } else {\r\n                    frappe.msgprint(__(\"No employees found for this workstation. Please add employees to the workstation first.\"));\r\n                    resolve([]);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nasync function pauseJob(frm, jobCard) {\r\n    try {\r\n        // Fetch the list of employees for the job card\r\n        const employeeResponse = await frappe.call({\r\n            method: \"aqiq_production_operations.aqiq_production_operations.rest.update_jobcard.get_job_card_employees\",\r\n            args: { job_card_id: jobCard }\r\n        });\r\n\r\n        if (employeeResponse.message.success) {\r\n            const employees = employeeResponse.message.employees;\r\n\r\n            // Prepare the time log arguments\r\n            const timeLogArgs = {\r\n                job_card_id: jobCard,\r\n                completed_qty: 0,\r\n                complete_time: frappe.datetime.now_datetime()\r\n            };\r\n\r\n            // Make time logs for each employee\r\n            for (const employee of employees) {\r\n                await frappe.call({\r\n                    method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n                    args: {\r\n                        args: JSON.stringify({\r\n                            ...timeLogArgs,\r\n                            employee: employee\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Update job card status to \"On Hold\"\r\n            // await updateJobCardStatus(frm, jobCard, \"On Hold\", false);\r\n\r\n            // Update the job card fields directly\r\n            await frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Job Card\",\r\n                    name: jobCard,\r\n                    fieldname: {\r\n                        status: \"On Hold\",\r\n                        custom_is_active: \"0\" \r\n                    }\r\n                }\r\n            });\r\n\r\n            // Refresh the job card list in the form\r\n            refreshJobCards(frm);\r\n\r\n            frappe.show_alert(__('Job Card paused and updated successfully.'));\r\n        } else {\r\n            frappe.msgprint(__('No employees found for this job card.'));\r\n        }\r\n    } catch (error) {\r\n        frappe.msgprint(__('Failed to pause the job card. Please try again.'));\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nasync function resumeJob(frm, jobCard) {\r\n    try {\r\n        // Fetch job card details\r\n        let response = await frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Job Card\",\r\n                name: jobCard\r\n            }\r\n        });\r\n\r\n        if (response.message) {\r\n            const jobCardDoc = response.message;\r\n\r\n            // Set the actual start date to now\r\n            jobCardDoc.actual_start_date = frappe.datetime.now_datetime();\r\n\r\n            // Save the updated job card\r\n            await frappe.call({\r\n                method: \"frappe.client.save\",\r\n                args: {\r\n                    doc: jobCardDoc\r\n                }\r\n            });\r\n\r\n            // Fetch the current employees assigned to the job card\r\n            const employeeResponse = await frappe.call({\r\n                method: \"aqiq_production_operations.aqiq_production_operations.rest.update_jobcard.get_job_card_employees\",\r\n                args: { job_card_id: jobCard }\r\n            });\r\n\r\n            if (employeeResponse.message.success) {\r\n                const assignedEmployees = employeeResponse.message.employees;\r\n\r\n                // Make time log for each assigned employee when resuming\r\n                for (const employee of assignedEmployees) {\r\n                    await frappe.call({\r\n                        method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n                        args: {\r\n                            args: JSON.stringify({\r\n                                job_card_id: jobCard,\r\n                                employee: employee,\r\n                                start_time: frappe.datetime.now_datetime()\r\n                            })\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Update job card status to \"Work In Progress\" and set custom_is_active\r\n                await frappe.call({\r\n                    method: \"frappe.client.set_value\",\r\n                    args: {\r\n                        doctype: \"Job Card\",\r\n                        name: jobCard,\r\n                        fieldname: {\r\n                            status: \"Work In Progress\",\r\n                            custom_is_active: \"1\"\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Refresh the job card list in the form\r\n                refreshJobCards(frm);\r\n                \r\n                frappe.show_alert(__('Job Card resumed successfully.'));\r\n            } else {\r\n                frappe.msgprint(__(\"Failed to fetch employees for the job card. Please try again.\"));\r\n            }\r\n        }\r\n    } catch (error) {\r\n        frappe.msgprint(__('Failed to resume the job card. Please try again.'));\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nasync function updateJobCardStatus(frm, jobCard, status, isActive) {\r\n    try {\r\n        const response = await frappe.call({\r\n            method: \"aqiq_production_operations.aqiq_production_operations.rest.update_jobcard.update_job_card_status\",\r\n            args: {\r\n                job_card: jobCard,\r\n                status: status,\r\n                is_active: isActive\r\n            }\r\n        });\r\n\r\n        if (response.message.success) {\r\n            frappe.show_alert({\r\n                message: __(\"Job Card {0} status updated to {1}\", [jobCard, status]),\r\n                indicator: 'green'\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Error updating Job Card status: {0}\", [response.message.message]));\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        frappe.msgprint(__('Failed to update the job card status. Please try again.'));\r\n        console.error(error);\r\n        return { message: { success: false, message: error.message } };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction getStatusColor(status) {\r\n    const colors = {\r\n        \"Open\": \"#ffa00a\",\r\n        \"Work In Progress\": \"#7575ff\",\r\n        \"On Hold\": \"#f43\",\r\n        \"Completed\": \"#28a745\",\r\n        \"Cancelled\": \"#ff5858\"\r\n    };\r\n    return colors[status] || \"#d1d8dd\";\r\n}\r\n\r\nfunction formatDateTime(dateTimeString) {\r\n    return moment(dateTimeString).format('DD-MM-YYYY HH:mm:ss');\r\n}\r\n\r\nfunction addCustomCSS() {\r\n    const style = `\r\n        <style>\r\n            .job-cards-grid {\r\n                display: grid;\r\n                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n                gap: 20px;\r\n            }\r\n            .job-card-tile {\r\n                border: 1px solid #d1d8dd;\r\n                border-radius: 8px;\r\n                overflow: hidden;\r\n                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n                transition: all 0.3s ease;\r\n            }\r\n            .job-card-tile:hover {\r\n                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\r\n            }\r\n            .job-card-header {\r\n                padding: 10px;\r\n                color: white;\r\n                font-weight: bold;\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                transition: background-color 0.3s ease;\r\n            }\r\n            .job-card-body {\r\n                padding: 15px;\r\n                background-color: #f8f9fa;\r\n                transition: background-color 0.3s ease;\r\n            }\r\n            .job-card-body p {\r\n                margin-bottom: 8px;\r\n                opacity: 0.8;\r\n                transition: opacity 0.3s ease;\r\n            }\r\n            .job-card-tile:hover .job-card-body p {\r\n                opacity: 1;\r\n            }\r\n            .job-card-actions {\r\n                padding: 10px;\r\n                background-color: #ffffff;\r\n                text-align: right;\r\n            }\r\n            .btn {\r\n                margin-left: 5px;\r\n                transition: all 0.3s ease;\r\n            }\r\n            .btn:hover {\r\n                transform: scale(1.05);\r\n            }\r\n            .job-card-link, .work-order-link {\r\n                transition: color 0.3s ease;\r\n            }\r\n            .job-card-link:hover, .work-order-link:hover {\r\n                color: #007bff;\r\n            }\r\n            .job-cards-group {\r\n                margin-bottom: 30px;\r\n            }\r\n            \r\n            .job-cards-group h3 {\r\n                margin-bottom: 15px;\r\n                padding-bottom: 5px;\r\n                border-bottom: 2px solid #d1d8dd;\r\n            }\r\n            active-job-card {\r\n                border: 2px solid #28a745;\r\n            }\r\n        </style>\r\n    `;\r\n    $(style).appendTo('head');\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Workstation",
  "enabled": 1,
  "modified": "2024-07-17 10:26:58.999676",
  "module": "AQIQ Production operations",
  "name": "Workstation",
  "script": "frappe.ui.form.on('Workstation', {\r\n    refresh: function(frm) {\r\n        addCustomCSS();\r\n        refreshJobCards(frm);\r\n    },\r\n    onload: function(frm){\r\n        refreshJobCards(frm)},\r\n    \r\n    after_save: function(frm) {\r\n        refreshJobCards(frm);\r\n    }\r\n});\r\n\r\nfunction refreshJobCards(frm) {\r\n    if (frm.doc.__islocal) return;\r\n\r\n    frappe.call({\r\n        method: \"erpnext.manufacturing.doctype.workstation.workstation.get_job_cards\",\r\n        args: {\r\n            workstation: frm.doc.name,\r\n        },\r\n        callback: (r) => {\r\n            if (r.message) {\r\n                renderJobCards(frm, r.message);\r\n                addPauseAllButton(frm, r.message);\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\nfunction addPauseAllButton(frm, jobCards) {\r\n    // Remove existing \"Pause All Running Jobs\" button if it exists\r\n    frm.remove_custom_button('Pause All Running Jobs');\r\n\r\n    // Check if there are any running job cards\r\n    const hasRunningJobs = jobCards.some(job => job.status === \"Work In Progress\");\r\n\r\n    if (hasRunningJobs) {\r\n        frm.add_custom_button(__('Pause All Running Jobs'), function() {\r\n            pauseAllRunningJobs(frm);\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCustomCSS() {\r\n    const style = `\r\n        <style>\r\n            .job-cards-container {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            .job-card {\r\n                border: 1px solid #d1d8dd;\r\n                padding: 10px;\r\n                margin-bottom: 10px;\r\n                background-color: #ffffff;\r\n                box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n            }\r\n            .job-card-header {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                margin-bottom: 10px;\r\n            }\r\n            .job-card-title {\r\n                font-weight: bold;\r\n                font-size: 16px;\r\n            }\r\n            .job-card-status {\r\n                padding: 5px 10px;\r\n                border-radius: 3px;\r\n                font-size: 14px;\r\n                color: white;\r\n                font-weight: bold;\r\n            }\r\n            .job-card-details {\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                margin-bottom: 10px;\r\n            }\r\n            .job-card-detail {\r\n                margin-right: 20px;\r\n                margin-bottom: 5px;\r\n            }\r\n            .job-card-timer {\r\n                font-weight: bold;\r\n            }\r\n            .job-card-actions {\r\n                margin-top: 10px;\r\n            }\r\n            .btn-group {\r\n                margin-right: 10px;\r\n            }\r\n        </style>\r\n    `;\r\n    $(style).appendTo('head');\r\n}\r\n\r\nfunction renderJobCards(frm, jobCards) {\r\n    let $wrapper = $(frm.fields_dict['workstation_dashboard'].wrapper);\r\n    $wrapper.empty();\r\n\r\n    let html = `\r\n        <div class=\"job-cards-container\">\r\n            ${jobCards.map(jobCard => `\r\n                <div class=\"job-card\" data-name=\"${jobCard.name}\">\r\n                    <div class=\"job-card-header\">\r\n                        <div class=\"job-card-title\">${jobCard.job_card_link}</div>\r\n                        <span class=\"job-card-status\" style=\"background-color: ${getStatusColor(jobCard.status)}\">${jobCard.status}</span>\r\n                    </div>\r\n                    <div class=\"job-card-details\">\r\n                        <div class=\"job-card-detail\"><strong>Work Order:</strong> ${jobCard.work_order}</div>\r\n                        <div class=\"job-card-detail\"><strong>Operation:</strong> ${jobCard.operation}</div>\r\n                        <div class=\"job-card-detail\"><strong>Quantity:</strong> ${jobCard.for_quantity}</div>\r\n                        <div class=\"job-card-detail\"><strong>Timer:</strong> <span class=\"job-card-timer\" data-start-time=\"${jobCard.time_logs.length ? jobCard.time_logs[0].from_time : ''}\">${jobCard.time_logs.length ? formatTimer(jobCard.time_logs[0].from_time) : 'N/A'}</span></div>\r\n                    </div>\r\n                    <div class=\"job-card-actions\">\r\n                        ${getActionButtons(jobCard)}\r\n                    </div>\r\n                </div>\r\n            `).join('')}\r\n        </div>\r\n    `;\r\n\r\n    $wrapper.html(html);\r\n    bindEvents(frm, $wrapper);\r\n    startTimerUpdates();\r\n}\r\n\r\nfunction formatTimer(startTime) {\r\n    if (!startTime) return 'N/A';\r\n\r\n    let start = new Date(startTime);\r\n    let now = new Date();\r\n    let diff = now - start;\r\n\r\n    if (diff < 0) return 'N/A';\r\n\r\n    let hours = Math.floor(diff / 3600000);\r\n    let minutes = Math.floor((diff % 3600000) / 60000);\r\n    let seconds = Math.floor((diff % 60000) / 1000);\r\n\r\n    return `${hours}h ${minutes}m ${seconds}s`;\r\n}\r\n\r\nfunction startTimerUpdates() {\r\n    setInterval(() => {\r\n        $('.job-card-timer').each(function() {\r\n            let startTime = $(this).data('start-time');\r\n            let status = $(this).closest('.job-card').find('.job-card-status').text().trim();\r\n\r\n            if (startTime && status !== \"On Hold\") {\r\n                $(this).text(formatTimer(startTime));\r\n            }\r\n        });\r\n    }, 1000);\r\n}\r\n\r\nfunction getStatusColor(status) {\r\n    const colors = {\r\n        \"Open\": \"#ffa00a\",\r\n        \"Work In Progress\": \"#7575ff\",\r\n        \"On Hold\": \"#f43\",\r\n        \"Completed\": \"#28a745\",\r\n        \"Cancelled\": \"#ff5858\"\r\n    };\r\n    return colors[status] || \"#d1d8dd\";\r\n}\r\n\r\nfunction getActionButtons(jobCard) {\r\n    switch (jobCard.status) {\r\n        case \"Open\":\r\n            return `<div class=\"btn-group\">\r\n                        <button class=\"btn btn-primary btn-xs btn-start\" data-job-card=\"${jobCard.name}\">Start</button>\r\n                    </div>`;\r\n        case \"Work In Progress\":\r\n            return `\r\n                <div class=\"btn-group\">\r\n                    <button class=\"btn btn-warning btn-xs btn-pause\" data-job-card=\"${jobCard.name}\">Pause</button>\r\n                    <button class=\"btn btn-success btn-xs btn-complete\" data-job-card=\"${jobCard.name}\">Complete</button>\r\n                </div>`;\r\n        case \"On Hold\":\r\n            return `<div class=\"btn-group\">\r\n                        <button class=\"btn btn-primary btn-xs btn-resume\" data-job-card=\"${jobCard.name}\">Resume</button>\r\n                    </div>`;\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nfunction bindEvents(frm, $wrapper) {\r\n    $wrapper.find('.btn-start').on('click', function() {\r\n        let jobCard = $(this).attr('data-job-card');\r\n        startJob(frm, jobCard);\r\n    });\r\n\r\n    $wrapper.find('.btn-pause').on('click', function() {\r\n        let jobCard = $(this).attr('data-job-card');\r\n        pauseJob(frm, jobCard);\r\n    });\r\n\r\n    $wrapper.find('.btn-resume').on('click', function() {\r\n        let jobCard = $(this).attr('data-job-card');\r\n        resumeJob(frm, jobCard);\r\n    });\r\n\r\n    $wrapper.find('.btn-complete').on('click', function() {\r\n        let jobCard = $(this).attr('data-job-card');\r\n        completeJob(frm, jobCard);\r\n    });\r\n}\r\n\r\nfunction startJob(frm, jobCard) {\r\n    frappe.call({\r\n        method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n        args: {\r\n            args: {\r\n                job_card_id: jobCard,\r\n                start_time: frappe.datetime.now_datetime(),\r\n                status: \"Work In Progress\"\r\n            }\r\n        },\r\n        callback: (r) => {\r\n            if (!r.exc) {\r\n                frappe.show_alert(__('Job Card started'));\r\n                refreshJobCards(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction pauseJob(frm, jobCard) {\r\n    frappe.call({\r\n        method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n        args: {\r\n            args: {\r\n                job_card_id: jobCard,\r\n                complete_time: frappe.datetime.now_datetime(),\r\n                status: \"On Hold\",\r\n                completed_qty: 0\r\n            }\r\n        },\r\n        callback: (r) => {\r\n            if (!r.exc) {\r\n                frappe.show_alert(__('Job Card paused'));\r\n                refreshJobCards(frm);\r\n                stopTimer(jobCard);\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction resumeJob(frm, jobCard) {\r\n    frappe.call({\r\n        method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n        args: {\r\n            args: {\r\n                job_card_id: jobCard,\r\n                start_time: frappe.datetime.now_datetime(),\r\n                status: \"Work In Progress\"\r\n            }\r\n        },\r\n        callback: (r) => {\r\n            if (!r.exc) {\r\n                frappe.show_alert(__('Job Card resumed'));\r\n                refreshJobCards(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction stopTimer(jobCard) {\r\n    let timerInterval = $(`[data-name=\"${jobCard}\"] .job-card-timer`).data('timer-interval');\r\n    clearInterval(timerInterval);\r\n}\r\n\r\nfunction completeJob(frm, jobCard) {\r\n    frappe.model.with_doc('Job Card', jobCard, function() {\r\n        let doc = frappe.get_doc('Job Card', jobCard);\r\n        let qtyToManufacture = doc.for_quantity;\r\n        let completedQty = doc.total_completed_qty || 0;\r\n        let remainingQty = qtyToManufacture - completedQty;\r\n        \r\n        frappe.prompt({\r\n            fieldname: 'completed_qty',\r\n            label: __('Completed Quantity'),\r\n            fieldtype: 'Float',\r\n            reqd: 1,\r\n            default: remainingQty,\r\n            description: `Quantity to manufacture: ${qtyToManufacture}, Already completed: ${completedQty}, Remaining: ${remainingQty}`\r\n        }, function(values) {\r\n            let newCompletedQty = values.completed_qty;\r\n            \r\n            if (newCompletedQty <= 0) {\r\n                frappe.msgprint(__('Completed quantity must be greater than zero.'));\r\n                return;\r\n            }\r\n            \r\n            if (newCompletedQty > remainingQty) {\r\n                frappe.msgprint(__('Completed quantity cannot exceed the remaining quantity.'));\r\n                return;\r\n            }\r\n            \r\n            frappe.call({\r\n                method: \"erpnext.manufacturing.doctype.job_card.job_card.make_time_log\",\r\n                args: {\r\n                    args: {\r\n                        job_card_id: jobCard,\r\n                        complete_time: frappe.datetime.now_datetime(),\r\n                        completed_qty: newCompletedQty\r\n                    }\r\n                },\r\n                callback: function(r) {\r\n                    if (!r.exc) {\r\n                        frappe.model.with_doc('Job Card', jobCard, function() {\r\n                            let updatedDoc = frappe.get_doc('Job Card', jobCard);\r\n                            let totalCompletedQty = updatedDoc.total_completed_qty;\r\n                            let status = totalCompletedQty >= qtyToManufacture ? 'Completed' : 'Work In Progress';\r\n                            \r\n                            frappe.db.set_value('Job Card', jobCard, 'status', status)\r\n                                .then(() => {\r\n                                    if (status === 'Completed') {\r\n                                        return frappe.db.submit('Job Card', jobCard);\r\n                                    }\r\n                                })\r\n                                .then(() => {\r\n                                    frappe.show_alert(__(`Job Card ${status.toLowerCase()}`));\r\n                                    refreshJobCards(frm);\r\n                                    \r\n                                    if (status !== 'Completed') {\r\n                                        frappe.confirm(\r\n                                            __('Do you want to create a new job card for the remaining quantity?'),\r\n                                            () => createNewJobCard(updatedDoc, frm)\r\n                                        );\r\n                                    }\r\n                                });\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }, __('Enter Completed Quantity'), __('Complete Job'));\r\n    });\r\n}\r\n\r\nfunction createNewJobCard(parentDoc, frm) {\r\n    frappe.model.with_doctype('Job Card', function() {\r\n        let newJobCard = frappe.model.get_new_doc('Job Card');\r\n        \r\n        // Inherit fields from parent Job Card\r\n        newJobCard.work_order = parentDoc.work_order;\r\n        newJobCard.bom_no = parentDoc.bom_no;\r\n        newJobCard.production_item = parentDoc.production_item;\r\n        newJobCard.company = parentDoc.company;\r\n        newJobCard.for_quantity = parentDoc.for_quantity - parentDoc.total_completed_qty;\r\n        newJobCard.wip_warehouse = parentDoc.wip_warehouse;\r\n        newJobCard.operation = parentDoc.operation;\r\n        newJobCard.workstation = parentDoc.workstation;\r\n        newJobCard.item_name = parentDoc.item_name;\r\n        newJobCard.posting_date = frappe.datetime.get_today();\r\n        newJobCard.operation_id = parentDoc.operation_id;\r\n        newJobCard.sequence_id = parentDoc.sequence_id;\r\n\r\n        // Set new Job Card specific fields\r\n        newJobCard.status = 'Open';\r\n        newJobCard.parent_job_card = parentDoc.name;\r\n        newJobCard.naming_series = parentDoc.naming_series;\r\n\r\n        // Handle time-related fields\r\n        let now = frappe.datetime.now_datetime();\r\n        newJobCard.planned_start_date = now;\r\n        newJobCard.expected_start_date = now;\r\n        \r\n        // Calculate expected end date\r\n        let expectedEndDate = new Date(now);\r\n        expectedEndDate.setMinutes(expectedEndDate.getMinutes() + parentDoc.time_required);\r\n        newJobCard.expected_end_date = frappe.datetime.get_datetime_as_string(expectedEndDate);\r\n\r\n        // Inherit scheduled_time_logs if any\r\n        if (parentDoc.scheduled_time_logs && parentDoc.scheduled_time_logs.length > 0) {\r\n            newJobCard.scheduled_time_logs = [{\r\n                from_time: newJobCard.expected_start_date,\r\n                to_time: newJobCard.expected_end_date,\r\n                time_in_mins: parentDoc.time_required\r\n            }];\r\n        }\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.insert',\r\n            args: {\r\n                doc: newJobCard\r\n            },\r\n            callback: function(r) {\r\n                if (!r.exc) {\r\n                    frappe.show_alert(__('New Job Card created for remaining quantity'));\r\n                    refreshJobCards(frm);\r\n                } else {\r\n                    frappe.msgprint(__('Error creating new Job Card: ') + r.exc);\r\n                    console.error('Error details:', r);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction pauseAllRunningJobs(frm) {\r\n    let jobCards = $('.job-card');\r\n    \r\n    jobCards.each(function() {\r\n        let $jobCard = $(this);\r\n        let jobCardName = $jobCard.data('name');\r\n        let status = $jobCard.find('.job-card-status').text().trim();\r\n\r\n        if (status === 'Work In Progress') {\r\n            pauseJob(frm, jobCardName);\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Workstation",
  "enabled": 1,
  "modified": "2024-07-20 09:54:48.276953",
  "module": "AQIQ Production operations",
  "name": "Workstation Custom",
  "script": "frappe.ui.form.on('Workstation', {\r\n    custom_generate_qr_code: function(frm) {\r\n        frappe.call({\r\n            method: 'aqiq_production_operations.aqiq_production_operations.rest.custom_workstation.generate_qr_code_button',\r\n            args: {\r\n                workstation_name: frm.doc.name\r\n            },\r\n            freeze: true,\r\n            freeze_message: __('Generating QR Code...'),\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frm.reload_doc();\r\n                    frappe.show_alert({\r\n                        message: __('QR Code generated successfully'),\r\n                        indicator: 'green'\r\n                    });\r\n                } else {\r\n                    frappe.msgprint(__('Failed to generate QR Code. Please try again.'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n});",
  "view": "Form"
 }
]